{
  "openapi": "3.0.2",
  "info": {
    "title": "GetAccess API",
    "description": "GetAccess is a provider of a universal API for small business financial software, used by service providers to build integrations with the software packages their small business customers use. This documentation should serve as a guide to help you through the process of building those integrations. \n If you have any questions at any time, please get in touch with us atÂ contact@getaccess.ai. \n\n# Introduction\nThe getAccess API is built on RESTful principles. All request and response payloads are encoded in JSON. For security purposes, all requests must be sent through HTTPS. To get access to the Developer keys and interface with the API, please contact contact@getaccess.ai. \n\n# Modes\nThe API is available in two modes that can be accessed using different endpoints. Below are the descriptions for the same on\n<table class=\"security-details\"><tbody><tr><th> Modes </th><th> Host </th><th> Description </th></tr><tr><td> Sandox </td><td> <a href=\"redirect.html\">https://sandbox-api.getaccess.ai</a> </td><td> Use Sandbox mode to build and test your integration. In this mode, you must use test credentials to authenticate with api platforms. All API endpoints will return mock data and no actual updates are made to any account. </td></tr><tr><td> Production </td><td> <a href=\"redirect.html\">https://api.getaccess.ai</a> </td><td> Use Production mode to go live with your integration. Your end-users will use their login credentials to authenticate with their customer accounts. API endpoints return real data and updates are made to customer accounts. Note that in this mode, all API calls are billable. </td></tr></tbody></table>\n\n# Connection\nThis section contains the workflow descriptions for linking and connecting a customer to their respective ERP companies. This section does not contain the information regarding Tally, since it is handled separately in the next section. The connection workflow consists of 2 steps: <br> <h2> Initiation</h2>\nThis step consists of requesting our servers for the rediruct url for the respective ERP system that the customer has chosen, these routes have been documented in the Company-Connection section. Once you get the redirect URL, it is the implementors job to redirect the customer to this url for authentication. Once the authentication is completed the <code>status</code> of the company changes from <code>registered</code>(which is assigned when the company is created) to <code>linked</code>.<br>For khatabook, the procedure is different. The implementor should ask the customer's phone number and send that as a query parameter <code>phone</code> as a GET to /company/connection/khata. In the next step the customer should be asked about the otp(which will be sent to their mobile after the GET request) and POST the phone number as <code>phone</code> and otp as <code>otp</code>. Only after this the linking of a khatabook customer would be complete.<br>Linked status means that the company has linked the ERP but is yet to connect to an organisation within the ERP. Since an ERP software might contain many companies, of which we are interested in only one, the next step asks the customer for exactly this information. <br> <h2>Connection</h2>\nIn this step the customer is asked to chose one company from the ERP system, he/she has linked their account to. After performing this step, the status of all the customers becomes connected and they can start fetching and pushing reports.\n<h3>QuickBooks</h3> This step is omitted for quickbooks which gets the status of <code>connected</code> on the initiation step itself, since the authentication mechanism in quickbooks authenticates the app for only one company, so no need for this step.\n<h3>Zoho</h3>Get the report with the report name 'GA.Reports.Zoho.OrganizationsData', which returns the data about the organizations a customer has, then you ask the cutomer to select an org and using the Company-Connection PUT route, send the <code>organisationId</code> of the org selected as <code>companyReference</code>.\n<h3>Xero</h3>\nProcedure is similar to Zoho. GET report 'GA.Reports.Xero.OrganizationsData', make the customer select one of the companies and then PUT the <code>tenantId</code> as the <code>companyReference</code> to company/connection\n<h3>Khata</h3>\nFor khatabook no extra request needs to be made, once the customer is linked, you need to fetch the company object using GET bank/companises/{companyId} and then the list of books available in the customer's account is in the field <code>company.dataConnection.other.books</code>. Make the customer select the book the customer wants to use and PUT the <code>book_id</code> as <code>companyReference</code> to company/connection.\n<h3>TallyPrime</h3>Get the report with the report name 'GA.Reports.TallyPrime.CompaniesData', which returns the data about the companies a customer has, then you ask the cutomer to select a company and using the Company-Connection PUT route, send the <code>CompanyName</code> of the org selected as <code>companyReference</code>.\n<h3>Marg</h3>Take input the <code>CompanyCode</code> from the customer and using the Company-Connection PUT route, send the <code>CompanyCode</code> of the org selected as <code>companyReference</code>. You should verify that the CompanyCode is valid by calling the Marg API once. Visit <a href=\"https://margcompusoft.com/api/CorporateAppSolution.html\">here</a> to checkout Marg API.\n\n# Tally\n This section contains the documentation regarding the tally connector. Since tally is an on premise software, a desktop app needs to be implemented for this purpose. We recommend the usage of electron for less development time. To use tally, implementors need to have the <code>queries.js</code> connector file which exports the <code>parsers</code> object containing the queries for each report type for tally. Note that this is asynchronous in nature so using async/await accordingly.\n<h2>Linking</h2>\nTo link a customer to Tally, POST <code>{name: 'tally',refreshToken: 'NA',accessToken: 'NA', endpoint: 'http://localhost:9000', expiryDate: Date.now()}</code> to /company/connection with the proper API key in header. Make sure you verify whether, tally is acting as a server. This links the customer to tally.\n<h2>Connecting</h2> Once linked you need to use the aforementioned PUT route to send the company name of the customer to <code>companyReference</code>. The available list of companies can be fetched by invoking <code>parsers['ListOfCompanies']()</code> given the tally server is running. Now the customer is connected to the company.\n<h2>Fetching</h2>\nEssentially the fetching report process remains the same. Just an additional step needs to be performed before fetching the reports using the documented routes. In this step, you first request data by calling <code>parsers[reportName]</code>, where <code>reportName</code> is the name of the report to be fetched according to the list provided by get reports route. Then you take the recieved data, say <code>parsedData</code> and POST <code>{data: parsedData}</code> to https://api-getaccess.herokuapp.com/company/data/reports/tally/{reportName}. After this you can fetch the latest report data using the documented routes and push it accordingly.",
    "version": "v0.1",
    "x-logo": {
      "url": "logo.png"
    }
  },
  "tags": [
    {
      "name": "Bank - Auth",
      "description": "Manages authentication for banks. Includes registration and login."
    },
    {
      "name": "Bank - Customers",
      "description": "These routes control the operations on customers associated with a bank."
    },
    {
      "name": "Bank - Data",
      "description": "These routes are utilized to fetch data such as reports from customers"
    },
    {
      "name": "stock_statement",
      "x-displayName": "Stock Statement",
      "description": "<SchemaDefinition schemaRef=\"#/components/reports/GA.Reports.StockStatement\" />\n"
    },
    {
      "name": "cam",
      "x-displayName": "CAM",
      "description": "<SchemaDefinition schemaRef=\"#/components/reports/GA.Reports.CAM\" />\n"
    },
    {
      "name": "bal_sheet",
      "x-displayName": "Balance Sheet",
      "description": "<SchemaDefinition schemaRef=\"#/components/reports/GA.Reports.BalanceSheet\" />\n"
    },
    {
      "name": "pnl",
      "x-displayName": "Profit and Loss",
      "description": "<SchemaDefinition schemaRef=\"#/components/reports/GA.Reports.ProfitAndLoss\" />\n"
    },
    {
      "name": "cashflow",
      "x-displayName": "Cash Flow",
      "description": "<SchemaDefinition schemaRef=\"#/components/reports/GA.Reports.CashFlow\" />\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Bank API Routes",
      "tags": ["Bank - Auth", "Bank - Customers", "Bank - Data"]
    },
    {
      "name": "Customer API Routes",
      "tags": ["Customer - Auth", "Customer - Connection", "Customer - Data"]
    },
    {
      "name": "Report Schemas",
      "tags": ["stock_statement", "cam", "bal_sheet", "pnl", "cashflow"]
    }
  ],
  "paths": {
    "$ref": "./paths/paths.json"
  },
  "components": {
    "schemas": {
      "$ref": "./schemas/schemas.json"
    },
    "reports": {
      "$ref": "./reports/reports.json"
    },
    "securitySchemes": {
      "Bank API Key": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Handles Authentication for Banks"
      },
      "Customer API Key": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Handles Authentication for Customers"
      }
    }
  },
  "servers": [
    {
      "url": "https://api-getaccess.herokuapp.com",
      "description": "Development Server"
    }
  ]
}
